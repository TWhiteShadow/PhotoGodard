{% extends 'base.html.twig' %}

{% block title %}Album -
{{ title }}
{% endblock %}

{% block javascripts %}
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.2/jquery.min.js"></script>
<script src="https://npmcdn.com/isotope-layout@3/dist/isotope.pkgd.js"></script>
<script src="https://npmcdn.com/isotope-fit-columns@1/fit-columns.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/magnific-popup.js/1.1.0/jquery.magnific-popup.js"
    integrity="sha512-C1zvdb9R55RAkl6xCLTPt+Wmcz6s+ccOvcr6G57lbm8M2fbgn2SUjUJbQ13fEyjuLViwe97uJvwa1EUf4F1Akw=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/magnific-popup.js/1.1.0/magnific-popup.css"
    integrity="sha512-WEQNv9d3+sqyHjrqUZobDhFARZDko2wpWdfcpv44lsypsSuMO0kHGd3MQ8rrsBn/Qa39VojphdU6CMkpJUmDVw=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
{% endblock %}

{# Important for all cdns #}
{% block javascriptsBody %}{% endblock %}

{% block body %}

{% include "_navbar.html.twig" with {
    "navbar_image_title": album.getName(),
    "navbar_image_path": path('app_file', {'photo' : album.getFavoritePhoto() ? album.getFavoritePhoto().getId() : album.getPhotos()|last .getId() } ),
}%}

<div id="content" class="flex flex-col justify-center w-full pt-6">
    <div class="flex justify-end items-center max-w-[95%] md:max-w-[1200px] w-full mt-0 mx-auto mb-4">
        <button id="downloadAlbum" class="h-fit text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">Télécharger</button>
    </div>
    <div class="isotopeGrid max-w-[95%] md:max-w-[1200px] w-full my-0 mx-auto img-gallery-magnific">
        {% if photos is not empty %}
        {% set i = 0 %}
        {% set photos = photos|reverse %}
        {% for photo in photos %}
            {% set i = i + 1 %}
            <a class="grid-item magnific-img w-1/2 md:w-1/3 min-w-[45%] md:min-w-[20%] p-2"
                href="{{ path("app_file", {"photo": photo.id} )}}">
                <img class="h-auto w-auto rounded-lg object-cover" width="200" height="100" src="{{ path("app_file",
                    {"photo": photo.id} ) }}" alt="{{ album.getName() ~ '-photo n°' ~ (i + 1) }}">

            </a>
        {% endfor %}
        {% endif %}
    </div>
</div>
<script>
document.getElementById("downloadAlbum").addEventListener("click", ()=>{
    document.getElementById("downloadAlbum").innerHTML = `<div class="loaderAlbumDownload">
    <p class="text">
    <span class="letter letter1">C</span>
    <span class="letter letter2">h</span>
    <span class="letter letter3">a</span>
    <span class="letter letter4">r</span>
    <span class="letter letter5">g</span>
    <span class="letter letter6">e</span>
    <span class="letter letter7">m</span>
    <span class="letter letter8">e</span>
    <span class="letter letter9">n</span>
    <span class="letter letter10">t</span>
    </p>
    </div>`; 



    const albumId = "{{ album.getId() }}"; 

    const url = `/createzip/${albumId}`;
    fetch(url)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json(); // Supposons que la réponse est en JSON contenant l'URL
        })
        .then(data => {
            // Utilisez window.location ou window.open pour déclencher le téléchargement
            window.location.href = data.url; // Assurez-vous que la clé est correcte
            document.getElementById("downloadAlbum").innerHTML = "Terminé!";
            setTimeout(() => { document.getElementById("downloadAlbum").innerHTML = "Télécharger";}, 5000);

        })
        .catch(error => {
            console.error('Error downloading photos:', error);
            setTimeout(() => { document.getElementById("downloadAlbum").innerHTML = "Télécharger";}, 5000);
        });
    
});

</script>

{% endblock %}
